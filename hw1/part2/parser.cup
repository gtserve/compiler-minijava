/* ---------------------------------- Preliminary Declarations ---------------------------------- */

import java_cup.runtime.*;

parser code {:
    Scanner scanner;
    StringBuilder strBuilder = new StringBuilder();
    String output;

    Parser(Scanner s) { 
        this.scanner = s;
    }
:}

scan with {: return scanner.next_token(); :};


/* ------------------------- Declaration of Terminals and Non Terminals ------------------------- */

terminal         CONCAT, IF, ELSE, PREFIX, SUFFIX;
terminal         LPAREN, RPAREN, RBRACE, COMMA, SPECIAL;
terminal String  STR_LITERAL, IDENTIFIER;

non terminal         program;
non terminal String  fun_def_list, expr_list, fun_def, fun_call_top, fun_call;
non terminal String  param_list, param_list_rest;
non terminal String  argum_list_top, argum_list_top_rest, argum_list, argum_list_rest;
non terminal String  expr_top, factor_top, expr, factor;


/* ------------------------- Precedence and Associatively of Terminals -------------------------- */

precedence left IF;
precedence left CONCAT;


/* ------------------------------------------ Grammar ------------------------------------------- */

program ::= fun_def_list:fdl expr_list:exl
            {: 
                output  = "public class Main {\n";
                output += fdl;
                output += exl;
                output += "\t}\n\n";
                output += "}\n";
                System.out.println(output);
            :}
            ;

fun_def_list  ::= fun_def:fd fun_def_list:fdl
                {: RESULT = fd + '\n' + fdl; :}

                | expr_top:e
                {:
                    RESULT =  "\tpublic static void main(String[] args) {\n"; 
                    RESULT += "\t\tSystem.out.println(" + e + ");\n";
                :}
                ;

expr_list   ::= expr_top:e expr_list:exl 
                {: RESULT = "\t\tSystem.out.println(" + e + ");\n" + exl; :}

                | /* empty */
                {: RESULT = ""; :}
                ;

fun_def ::= IDENTIFIER:id LPAREN param_list:pl SPECIAL expr:e RBRACE
            {:
                RESULT =  "\tpublic static String " + id + '(' + pl + ") {\n";
                RESULT += "\t\treturn " + e + ";\n";
                RESULT += "\t}\n";
            :}
            ;

fun_call_top ::= IDENTIFIER:id LPAREN argum_list_top:al RPAREN
                {: RESULT = id + '(' + al + ')'; :}
                ;

fun_call ::= IDENTIFIER:id LPAREN argum_list:al RPAREN
            {: RESULT = id + '(' + al + ')'; :}
            ;

param_list ::= IDENTIFIER:id param_list_rest:pl
            {: RESULT = "String " + id + pl; :}
            
            | /* empty */
            {: RESULT = ""; :}
            ;

param_list_rest ::= COMMA IDENTIFIER:id param_list_rest:pl
                    {: RESULT = ", String " + id + pl; :}

                    | /* empty */
                    {: RESULT = ""; :}
                    ;

argum_list ::= expr:e argum_list_rest:al
            {: RESULT = e + al; :}

            | /* empty */
            {: RESULT = ""; :}
            ;

argum_list_rest ::= COMMA expr:e argum_list_rest:al
                    {: RESULT = ", " + e + al; :}

                    | /* empty */
                    {: RESULT = ""; :}
                    ;

argum_list_top  ::= expr_top:e argum_list_top_rest:al
                    {: RESULT = e + al; :}

                    | /* empty */
                    {: RESULT = ""; :}
                    ;

argum_list_top_rest ::= COMMA expr_top:e argum_list_top_rest:al
                        {: RESULT = ", " + e + al; :}

                        | /* empty */
                        {: RESULT = ""; :}
                        ;

expr_top ::= expr_top:e1 CONCAT expr_top:e2
            {: RESULT = e1 + " + " + e2; :}

            | IF LPAREN expr_top:e1 PREFIX expr_top:e2 RPAREN expr_top:e3 ELSE expr_top:e4
            {: RESULT = "((" + e2 + ".startsWith(" + e1 + ")) ? " + e3 + " : " + e4 + ")"; :}

            | IF LPAREN expr_top:e1 SUFFIX expr_top:e2 RPAREN expr_top:e3 ELSE expr_top:e4
            {: RESULT = "((" + e2 + ".endsWith(" + e1 + ")) ? " + e3 + " : " + e4 + ")"; :}

            | factor_top:f
            {: RESULT = f; :}
            ;   

factor_top  ::= STR_LITERAL:s
                {: RESULT = '"' + s + '"'; :}

                |  fun_call_top:fun
                {: RESULT = fun; :}
                ;

expr ::= expr:e1 CONCAT expr:e2
        {: RESULT = e1 + " + " + e2; :}

        | IF LPAREN expr:e1 PREFIX expr:e2 RPAREN expr:e3 ELSE expr:e4
        {: RESULT = "((" + e2 + ".startsWith(" + e1 + ")) ? " + e3 + " : " + e4 + ")"; :}

        | IF LPAREN expr:e1 SUFFIX expr:e2 RPAREN expr:e3 ELSE expr:e4
        {: RESULT = "((" + e2 + ".endsWith(" + e1 + ")) ? " + e3 + " : " + e4 + ")"; :}

        | factor:f
        {: RESULT = f; :}
        ;       

factor ::= STR_LITERAL:s
        {: RESULT = '"' + s + '"'; :}

        |  IDENTIFIER:id
        {: RESULT = id; :}

        |  fun_call:fun
        {: RESULT = fun; :}
        ;
